<#
/*
Copyright (c) Pawel Kadluczka. All rights reserved.

AS IS, NO WARRANTY, USE ON YOUR OWN RISK

T4 template for creating pre-generated views for Entity Framework 6 Code First applications

Usage: 
1. Build your project
2. Add this template to your project
3. Rename this template so that its name contains the name of your DbContext derived class (e.g. MyContext.Views.tt)
4. Right-click the template file in the Solution Explorer and select "Run Custom Tool"
5. If you have more than one DbContext derived class in your project you need to add a separate template for each
   DbContext derived class you want to create pre-generated views for. 
*/
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)"#>
<#@ assembly name="$(ProjectDir)$(OutDir)EntityFramework.dll"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Core" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ import namespace="System.Data.Entity.Core.Mapping" #>
<#@ import namespace="System.Data.Entity.Core.Mapping.ViewGeneration" #>
<#@ import namespace="System.Data.Entity.Infrastructure" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<# 
	var configFilePath = GetConfigFilePath();
	if (configFilePath != null)
	{
		AppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", configFilePath);
	}
 
	var mappingItemCollection = 
		GetMappingItemCollection(GetEdmx(GetContextType(GetContextTypeName())));

	IList<EdmSchemaError> errors = new List<EdmSchemaError>();
	var viewGroups = mappingItemCollection.GenerateViews(errors);

	if (errors != null && errors.Count > 0)
	{
		return string.Join(
			"\r\n",
			errors.Select(
				e => string.Format("{0} {1}: {2}", e.Severity, e.ErrorCode, e.Message).ToArray()));
	}

	// if no errors CodeFirst always generates just one EntityContainer
	var viewGroup = viewGroups.Single();
	
	SaveViews(viewGroup);

	var viewClassName = "ViewsForBaseEntitySets" + Guid.NewGuid().ToString("N");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.<#= viewClassName #>))]
namespace Edm_EntityMappingGeneratedViews
{
	using System.Collections.Generic;
	using System.Reflection;
	using System.Xml;
	using System.Xml.Linq;

    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class <#= viewClassName #> : System.Data.Entity.Core.Mapping.EntityViewContainer
	{
		private static List<KeyValuePair<string, string>> extentViews = null;
		private readonly static object lockObject = new object();

        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
		public <#= viewClassName #>()
		{
            this.EdmEntityContainerName = "<#= viewGroup.ModelContainerName #>";
            this.StoreEntityContainerName = "<#= viewGroup.StoreContainerName #>";
            this.HashOverMappingClosure = "<#= viewGroup.MappingHash #>";
            this.ViewCount = <#= viewGroup.Views.Count() #>;
		}

		/// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override KeyValuePair<string, string> GetViewAt(int index)
        {
			// do not lock if views are loaded
			if (extentViews == null)
			{
				lock(lockObject)
				{
					if (extentViews == null)
					{
						LoadViews();
					}
				}
			}

			return extentViews[index];
        }

		private static void LoadViews()
		{
			extentViews = new List<KeyValuePair<string, string>>();

			using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("<#= 
			(string)GetTemplateProjectItem().ContainingProject.Properties.Item("DefaultNamespace").Value#>.<#=
			Path.GetFileName(Path.ChangeExtension(Host.TemplateFile, "xml"))#>"))
			using (var reader = XmlReader.Create(stream))
			{
				while (reader.ReadToFollowing("view"))
				{
					extentViews.Add(new KeyValuePair<string, string>(reader["extent"], reader.ReadElementContentAsString()));
				}
			}
		}
	}
}
<#+
	private string GetContextTypeName()
	{
		var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);

		var dotPosition = templateFileName.IndexOf('.');
		if(dotPosition <= 0)
		{
			throw new InvalidOperationException(
				string.Format("The template name '{0}' has an unexpected format.", Host.TemplateFile));
		}

		return templateFileName.Substring(0, dotPosition);
	}

	private Type GetContextType(string contextTypeName)
	{
		foreach(var assembly in AppDomain.CurrentDomain.GetAssemblies().Where(a => !a.IsDynamic))
		{
			var contextType = assembly
								.GetTypes()
								.AsEnumerable()
								.FirstOrDefault(
									t => t.Name == contextTypeName && 
									typeof(DbContext).IsAssignableFrom(t));

			if(contextType != null )
			{
				return contextType;
			}
		}

		throw new InvalidOperationException(
			"Could not find the context type. Make sure the template name is using convention '{ContextTypeName}.Views.tt'");
	}

	private XDocument GetEdmx(Type contextType)
	{		
		var ms = new MemoryStream();

		using(var writer = XmlWriter.Create(ms))
		{
			EdmxWriter.WriteEdmx((DbContext)Activator.CreateInstance(contextType), writer);
		}

		ms.Position = 0;

		return XDocument.Load(ms);
	}

	private void SplitEdmx(XDocument edmx, out XmlReader csdlReader, out XmlReader ssdlReader, out XmlReader mslReader)
	{
		// xml namespace agnostic to make it work with any version of Entity Framework
        var edmxNs = edmx.Root.Name.Namespace;

        var storageModels = edmx.Descendants(edmxNs + "StorageModels").Single();
        var conceptualModels = edmx.Descendants(edmxNs + "ConceptualModels").Single();
        var mappings = edmx.Descendants(edmxNs + "Mappings").Single();

        ssdlReader = storageModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        csdlReader = conceptualModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        mslReader = mappings.Elements().Single(e => e.Name.LocalName == "Mapping").CreateReader();
	}

	private StorageMappingItemCollection GetMappingItemCollection(XDocument edmx)
	{
		// extract csdl, ssdl and msl artifacts from the Edmx
		XmlReader csdlReader, ssdlReader, mslReader;
		SplitEdmx(edmx, out csdlReader, out ssdlReader, out mslReader);

		// Initialize item collections
		var edmItemCollection = new EdmItemCollection(new XmlReader[] { csdlReader });
		var storeItemCollection = new StoreItemCollection(new XmlReader[] { ssdlReader });
		return new StorageMappingItemCollection(edmItemCollection, storeItemCollection, new XmlReader[] { mslReader });
	}

	private void SaveViews(ContainerMappingViewGroup viewGroup)
	{
		var embeddedViewsFileName = Path.ChangeExtension(Host.TemplateFile, "xml");
		using(var writer = XmlWriter.Create(embeddedViewsFileName, new XmlWriterSettings { Indent = true }))
		{
			writer.WriteStartElement("views");
			foreach(var kvp in viewGroup.Views)
			{
				writer.WriteStartElement("view");
				writer.WriteAttributeString("extent", GetExtentFullName(kvp.Key));
				writer.WriteCData(kvp.Value);
				writer.WriteEndElement();
			}

			writer.WriteEndElement();
		}

		AddViewsToProject(embeddedViewsFileName);
	}

	private string GetExtentFullName(EntitySetBase entitySet)
	{
		return string.Format("{0}.{1}", entitySet.EntityContainer.Name, entitySet.Name);
	}

	private string GetConfigFilePath()
	{
		var project = GetTemplateProjectItem().ContainingProject;
		var configFile = 
			project
			.ProjectItems
			.Cast<EnvDTE.ProjectItem>()
			.FirstOrDefault(i => string.Compare("web.config", i.Name, true) == 0 || string.Compare("app.config", i.Name, true) == 0);

		return configFile == null ? null : configFile.FileNames[0];
	}

	private void AddViewsToProject(string filePath)
	{
		var projectItem = GetTemplateProjectItem().ProjectItems.AddFromFile(filePath);
		projectItem.Properties.Item("BuildAction").Value = /*prjBuildActionEmbeddedResource*/ 3;		
	}

	private EnvDTE.ProjectItem GetTemplateProjectItem()
	{
		var dte = (EnvDTE.DTE)((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
		return dte.Solution.FindProjectItem(Host.TemplateFile);
	}
#>