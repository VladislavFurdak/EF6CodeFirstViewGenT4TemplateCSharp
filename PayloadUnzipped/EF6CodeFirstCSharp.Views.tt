<#
/*
Copyright (c) Pawel Kadluczka. All rights reserved.

AS IS, NO WARRANTY, USE ON YOUR OWN RISK

T4 template for creating pre-generated views for Entity Framework 6 Code First applications

Usage: 
1. Build your project
2. Add this template to your project
3. Rename this template so that its name contains the name of your DbContext derived class (e.g. MyContext.Views.tt)
4. Right-click the template file in the Solution Explorer and select "Run Custom Tool"
5. If you have more than one DbContext derived class in your project you need to add a separate template for each
   DbContext derived class you want to create pre-generated views for. 
*/
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(ProjectDir)$(OutDir)EntityFramework.dll"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Core" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ import namespace="System.Data.Entity.Core.Mapping" #>
<#@ import namespace="System.Data.Entity.Infrastructure.MappingViews" #>
<#@ import namespace="System.Data.Entity.Core.Mapping.ViewGeneration" #>
<#@ import namespace="System.Data.Entity.Infrastructure" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<# 
	var configFilePath = GetConfigFilePath();
	if (configFilePath != null)
	{
		AppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", configFilePath);
	}

	LoadTargetAssembly();

	var contextType = GetContextType(GetContextTypeName());

	var mappingItemCollection = GetMappingItemCollection(contextType);

	IList<EdmSchemaError> errors = new List<EdmSchemaError>();
	var views = mappingItemCollection.GenerateViews(errors);

	if (errors != null && errors.Count > 0)
	{
		return string.Join(
			"\r\n",
			errors.Select(
				e => string.Format("{0} {1}: {2}", e.Severity, e.ErrorCode, e.Message).ToArray()));
	}

	// if no errors CodeFirst always generates just one EntityContainer
	SaveViews(views);

	var viewClassName = "ViewsForBaseEntitySets" + Guid.NewGuid().ToString("N");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute(typeof(<#= contextType.FullName #>), typeof(Edm_EntityMappingGeneratedViews.<#= viewClassName #>))]
namespace Edm_EntityMappingGeneratedViews
{
	using System.Collections.Generic;
	using System.Data.Entity.Core.Metadata.Edm;
	using System.Data.Entity.Infrastructure.MappingViews;
	using System.Reflection;
	using System.Xml;
	using System.Xml.Linq;

	/// <Summary>
	/// The type contains views for EntitySets and AssociationSets that were generated at design time.
	/// </Summary>
	public sealed class <#= viewClassName #> : DbMappingViewCache
	{
		private static Dictionary<string, DbMappingView> extentViews = null;
		private readonly static object lockObject = new object();

		public override string MappingHashValue { get { return "<#= mappingItemCollection.ComputeMappingHashValue() #>"; } }

		/// <Summary>
		/// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
		/// </Summary>
		public <#= viewClassName #>()
		{
		}

		/// <Summary>
		/// The method returns the view for the index given.
		/// </Summary>
		public override DbMappingView GetView(EntitySetBase extent)
		{
			// do not lock if views are loaded
			if (extentViews == null)
			{
				lock(lockObject)
				{
					if (extentViews == null)
					{
						LoadViews();
					}
				}
			}

			DbMappingView view;
			extentViews.TryGetValue(GetExtentFullName(extent), out view);
			return view;
		}

		private static void LoadViews()
		{
			extentViews = new Dictionary<string, DbMappingView>();

			using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("<#= 
			(string)GetTemplateProjectItem().ContainingProject.Properties.Item("DefaultNamespace").Value#>.<#=
			Path.GetFileName(Path.ChangeExtension(Host.TemplateFile, "xml"))#>"))
			using (var reader = XmlReader.Create(stream))
			{
				while (reader.ReadToFollowing("view"))
				{
					extentViews.Add(reader["extent"], new DbMappingView(reader.ReadElementContentAsString()));
				}
			}
		}

		private static string GetExtentFullName(EntitySetBase entitySet)
		{
			return string.Format("{0}.{1}", entitySet.EntityContainer.Name, entitySet.Name);
		}
	}
}
<#+
	private void LoadTargetAssembly()
	{
		Assembly.LoadFile(GetTargetAssemblyPath());
	}

	private string GetContextTypeName()
	{
		var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);

		var dotPosition = templateFileName.IndexOf('.');
		if(dotPosition <= 0)
		{
			throw new InvalidOperationException(
				string.Format("The template name '{0}' has an unexpected format.", Host.TemplateFile));
		}

		return templateFileName.Substring(0, dotPosition);
	}

	private Type GetContextType(string contextTypeName)
	{
		foreach(var assembly in AppDomain.CurrentDomain.GetAssemblies().Where(a => !a.IsDynamic))
		{
			var contextType = assembly
								.GetTypes()
								.AsEnumerable()
								.FirstOrDefault(
									t => t.Name == contextTypeName && 
									typeof(DbContext).IsAssignableFrom(t));

			if(contextType != null )
			{
				return contextType;
			}
		}

		throw new InvalidOperationException(
			"Could not find the context type. Make sure the template name is using convention '{ContextTypeName}.Views.tt'");
	}

	private StorageMappingItemCollection GetMappingItemCollection(Type contextType)
	{
		var contextInfo = new DbContextInfo(contextType);
		var context = contextInfo.CreateInstance();
		return (StorageMappingItemCollection)((IObjectContextAdapter)context).ObjectContext.MetadataWorkspace.GetItemCollection(DataSpace.CSSpace);
	}

	private void SaveViews(Dictionary<EntitySetBase, DbMappingView> views)
	{
		var embeddedViewsFileName = Path.ChangeExtension(Host.TemplateFile, "xml");
		using(var writer = XmlWriter.Create(embeddedViewsFileName, new XmlWriterSettings { Indent = true }))
		{
			writer.WriteStartElement("views");
			foreach(var kvp in views)
			{
				writer.WriteStartElement("view");
				writer.WriteAttributeString("extent", GetExtentFullName(kvp.Key));
				writer.WriteCData(kvp.Value.EntitySql);
				writer.WriteEndElement();
			}

			writer.WriteEndElement();
		}

		AddViewsToProject(embeddedViewsFileName);
	}

	private static string GetExtentFullName(EntitySetBase entitySet)
	{
		return string.Format("{0}.{1}", entitySet.EntityContainer.Name, entitySet.Name);
	}

	private string GetTargetAssemblyPath()
	{
		var project = GetTemplateProjectItem().ContainingProject;

		return Path.Combine(
			project.Properties.Item("FullPath").Value.ToString(),
			project.ConfigurationManager.ActiveConfiguration.Properties.Item("OutputPath").Value.ToString(),
			project.Properties.Item("OutputFileName").Value.ToString());
	}

	private string GetConfigFilePath()
	{
		var project = GetTemplateProjectItem().ContainingProject;
		var configFile = 
			project
			.ProjectItems
			.Cast<EnvDTE.ProjectItem>()
			.FirstOrDefault(i => string.Compare("web.config", i.Name, true) == 0 || string.Compare("app.config", i.Name, true) == 0);

		return configFile == null ? null : configFile.FileNames[0];
	}

	private void AddViewsToProject(string filePath)
	{
		var projectItem = GetTemplateProjectItem().ProjectItems.AddFromFile(filePath);
		projectItem.Properties.Item("BuildAction").Value = /*prjBuildActionEmbeddedResource*/ 3;
	}

	private EnvDTE.ProjectItem GetTemplateProjectItem()
	{
		var dte = (EnvDTE.DTE)((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
		return dte.Solution.FindProjectItem(Host.TemplateFile);
	}
#>